///
/// ContentScale.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::telephoto {

  /**
   * An enum which can be represented as a JavaScript union (ContentScale).
   */
  enum class ContentScale {
    CROP      SWIFT_NAME(crop) = 0,
    FIT      SWIFT_NAME(fit) = 1,
    FILL_WIDTH      SWIFT_NAME(fillWidth) = 2,
    FILL_HEIGHT      SWIFT_NAME(fillHeight) = 3,
    INSIDE      SWIFT_NAME(inside) = 4,
    NONE      SWIFT_NAME(none) = 5,
    FILL_BOUNDS      SWIFT_NAME(fillBounds) = 6,
  } CLOSED_ENUM;

} // namespace margelo::nitro::telephoto

namespace margelo::nitro {

  using namespace margelo::nitro::telephoto;

  // C++ ContentScale <> JS ContentScale (union)
  template <>
  struct JSIConverter<ContentScale> final {
    static inline ContentScale fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("crop"): return ContentScale::CROP;
        case hashString("fit"): return ContentScale::FIT;
        case hashString("fill-width"): return ContentScale::FILL_WIDTH;
        case hashString("fill-height"): return ContentScale::FILL_HEIGHT;
        case hashString("inside"): return ContentScale::INSIDE;
        case hashString("none"): return ContentScale::NONE;
        case hashString("fill-bounds"): return ContentScale::FILL_BOUNDS;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum ContentScale - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, ContentScale arg) {
      switch (arg) {
        case ContentScale::CROP: return JSIConverter<std::string>::toJSI(runtime, "crop");
        case ContentScale::FIT: return JSIConverter<std::string>::toJSI(runtime, "fit");
        case ContentScale::FILL_WIDTH: return JSIConverter<std::string>::toJSI(runtime, "fill-width");
        case ContentScale::FILL_HEIGHT: return JSIConverter<std::string>::toJSI(runtime, "fill-height");
        case ContentScale::INSIDE: return JSIConverter<std::string>::toJSI(runtime, "inside");
        case ContentScale::NONE: return JSIConverter<std::string>::toJSI(runtime, "none");
        case ContentScale::FILL_BOUNDS: return JSIConverter<std::string>::toJSI(runtime, "fill-bounds");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert ContentScale to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("crop"):
        case hashString("fit"):
        case hashString("fill-width"):
        case hashString("fill-height"):
        case hashString("inside"):
        case hashString("none"):
        case hashString("fill-bounds"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
