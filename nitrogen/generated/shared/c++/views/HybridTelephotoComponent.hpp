///
/// HybridTelephotoComponent.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <optional>
#include <NitroModules/NitroDefines.hpp>
#include <NitroModules/NitroHash.hpp>
#include <NitroModules/CachedProp.hpp>
#include <react/renderer/core/ConcreteComponentDescriptor.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/components/view/ConcreteViewShadowNode.h>
#include <react/renderer/components/view/ViewProps.h>

#include <string>
#include <optional>
#include <string>
#include <optional>
#include "Alignment.hpp"
#include <optional>
#include "ContentScale.hpp"
#include <optional>
#include <optional>
#include <optional>
#include <functional>
#include "Offset.hpp"
#include <optional>
#include <functional>
#include "Offset.hpp"
#include <optional>
#include <functional>
#include <optional>
#include <optional>
#include <functional>
#include <memory>
#include "HybridTelephotoSpec.hpp"

namespace margelo::nitro::telephoto::views {

  using namespace facebook;

  /**
   * The name of the actual native View.
   */
  extern const char HybridTelephotoComponentName[];

  /**
   * Props for the "Telephoto" View.
   */
  class HybridTelephotoProps final: public react::ViewProps {
  public:
    HybridTelephotoProps() = default;
    HybridTelephotoProps(const HybridTelephotoProps&);
    HybridTelephotoProps(const react::PropsParserContext& context,
                         const HybridTelephotoProps& sourceProps,
                         const react::RawProps& rawProps);

  public:
    CachedProp<std::string> source;
    CachedProp<std::optional<std::string>> contentDescription;
    CachedProp<std::optional<Alignment>> alignment;
    CachedProp<std::optional<ContentScale>> contentScale;
    CachedProp<std::optional<double>> minZoomFactor;
    CachedProp<std::optional<double>> maxZoomFactor;
    CachedProp<std::optional<std::function<void(const Offset& /* offset */)>>> onPress;
    CachedProp<std::optional<std::function<void(const Offset& /* offset */)>>> onLongPress;
    CachedProp<std::optional<std::function<void(std::optional<double> /* factor */)>>> onZoomFractionChanged;
    CachedProp<std::optional<std::function<void(const std::shared_ptr<margelo::nitro::telephoto::HybridTelephotoSpec>& /* ref */)>>> hybridRef;

  private:
    static bool filterObjectKeys(const std::string& propName);
  };

  /**
   * State for the "Telephoto" View.
   */
  class HybridTelephotoState final {
  public:
    HybridTelephotoState() = default;

  public:
    void setProps(const HybridTelephotoProps& props) { _props.emplace(props); }
    const std::optional<HybridTelephotoProps>& getProps() const { return _props; }

  public:
#ifdef ANDROID
  HybridTelephotoState(const HybridTelephotoState& /* previousState */, folly::dynamic /* data */) {}
  folly::dynamic getDynamic() const {
    throw std::runtime_error("HybridTelephotoState does not support folly!");
  }
  react::MapBuffer getMapBuffer() const {
    throw std::runtime_error("HybridTelephotoState does not support MapBuffer!");
  };
#endif

  private:
    std::optional<HybridTelephotoProps> _props;
  };

  /**
   * The Shadow Node for the "Telephoto" View.
   */
  using HybridTelephotoShadowNode = react::ConcreteViewShadowNode<HybridTelephotoComponentName /* "HybridTelephoto" */,
                                                                  HybridTelephotoProps /* custom props */,
                                                                  react::ViewEventEmitter /* default */,
                                                                  HybridTelephotoState /* custom state */>;

  /**
   * The Component Descriptor for the "Telephoto" View.
   */
  class HybridTelephotoComponentDescriptor final: public react::ConcreteComponentDescriptor<HybridTelephotoShadowNode> {
  public:
    HybridTelephotoComponentDescriptor(const react::ComponentDescriptorParameters& parameters);

  public:
    /**
     * A faster path for cloning props - reuses the caching logic from `HybridTelephotoProps`.
     */
    react::Props::Shared cloneProps(const react::PropsParserContext& context,
                                    const react::Props::Shared& props,
                                    react::RawProps rawProps) const override;
#ifdef ANDROID
    void adopt(react::ShadowNode& shadowNode) const override;
#endif
  };

  /* The actual view for "Telephoto" needs to be implemented in platform-specific code. */

} // namespace margelo::nitro::telephoto::views
