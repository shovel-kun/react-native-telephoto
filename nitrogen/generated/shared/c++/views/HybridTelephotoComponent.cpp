///
/// HybridTelephotoComponent.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridTelephotoComponent.hpp"

#include <string>
#include <exception>
#include <utility>
#include <NitroModules/NitroDefines.hpp>
#include <NitroModules/JSIConverter.hpp>
#include <react/renderer/core/RawValue.h>
#include <react/renderer/core/ShadowNode.h>
#include <react/renderer/core/ComponentDescriptor.h>
#include <react/renderer/components/view/ViewProps.h>

namespace margelo::nitro::telephoto::views {

  extern const char HybridTelephotoComponentName[] = "Telephoto";

  HybridTelephotoProps::HybridTelephotoProps(const react::PropsParserContext& context,
                                             const HybridTelephotoProps& sourceProps,
                                             const react::RawProps& rawProps):
    react::ViewProps(context, sourceProps, rawProps, filterObjectKeys),
    source([&]() -> CachedProp<std::string> {
      try {
        const react::RawValue* rawValue = rawProps.at("source", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.source;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::string>::fromRawValue(*runtime, value, sourceProps.source);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("Telephoto.source: ") + exc.what());
      }
    }()),
    contentDescription([&]() -> CachedProp<std::optional<std::string>> {
      try {
        const react::RawValue* rawValue = rawProps.at("contentDescription", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.contentDescription;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::string>>::fromRawValue(*runtime, value, sourceProps.contentDescription);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("Telephoto.contentDescription: ") + exc.what());
      }
    }()),
    alignment([&]() -> CachedProp<std::optional<Alignment>> {
      try {
        const react::RawValue* rawValue = rawProps.at("alignment", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.alignment;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<Alignment>>::fromRawValue(*runtime, value, sourceProps.alignment);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("Telephoto.alignment: ") + exc.what());
      }
    }()),
    contentScale([&]() -> CachedProp<std::optional<ContentScale>> {
      try {
        const react::RawValue* rawValue = rawProps.at("contentScale", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.contentScale;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<ContentScale>>::fromRawValue(*runtime, value, sourceProps.contentScale);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("Telephoto.contentScale: ") + exc.what());
      }
    }()),
    minZoomFactor([&]() -> CachedProp<std::optional<double>> {
      try {
        const react::RawValue* rawValue = rawProps.at("minZoomFactor", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.minZoomFactor;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<double>>::fromRawValue(*runtime, value, sourceProps.minZoomFactor);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("Telephoto.minZoomFactor: ") + exc.what());
      }
    }()),
    maxZoomFactor([&]() -> CachedProp<std::optional<double>> {
      try {
        const react::RawValue* rawValue = rawProps.at("maxZoomFactor", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.maxZoomFactor;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<double>>::fromRawValue(*runtime, value, sourceProps.maxZoomFactor);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("Telephoto.maxZoomFactor: ") + exc.what());
      }
    }()),
    onPress([&]() -> CachedProp<std::optional<std::function<void(const Offset& /* offset */)>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("onPress", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.onPress;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void(const Offset& /* offset */)>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.onPress);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("Telephoto.onPress: ") + exc.what());
      }
    }()),
    onLongPress([&]() -> CachedProp<std::optional<std::function<void(const Offset& /* offset */)>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("onLongPress", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.onLongPress;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void(const Offset& /* offset */)>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.onLongPress);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("Telephoto.onLongPress: ") + exc.what());
      }
    }()),
    hybridRef([&]() -> CachedProp<std::optional<std::function<void(const std::shared_ptr<margelo::nitro::telephoto::HybridTelephotoSpec>& /* ref */)>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("hybridRef", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.hybridRef;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void(const std::shared_ptr<margelo::nitro::telephoto::HybridTelephotoSpec>& /* ref */)>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.hybridRef);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("Telephoto.hybridRef: ") + exc.what());
      }
    }()) { }

  HybridTelephotoProps::HybridTelephotoProps(const HybridTelephotoProps& other):
    react::ViewProps(),
    source(other.source),
    contentDescription(other.contentDescription),
    alignment(other.alignment),
    contentScale(other.contentScale),
    minZoomFactor(other.minZoomFactor),
    maxZoomFactor(other.maxZoomFactor),
    onPress(other.onPress),
    onLongPress(other.onLongPress),
    hybridRef(other.hybridRef) { }

  bool HybridTelephotoProps::filterObjectKeys(const std::string& propName) {
    switch (hashString(propName)) {
      case hashString("source"): return true;
      case hashString("contentDescription"): return true;
      case hashString("alignment"): return true;
      case hashString("contentScale"): return true;
      case hashString("minZoomFactor"): return true;
      case hashString("maxZoomFactor"): return true;
      case hashString("onPress"): return true;
      case hashString("onLongPress"): return true;
      case hashString("hybridRef"): return true;
      default: return false;
    }
  }

  HybridTelephotoComponentDescriptor::HybridTelephotoComponentDescriptor(const react::ComponentDescriptorParameters& parameters)
    : ConcreteComponentDescriptor(parameters,
                                  react::RawPropsParser(/* enableJsiParser */ true)) {}

  react::Props::Shared HybridTelephotoComponentDescriptor::cloneProps(const react::PropsParserContext& context,
                                                                      const react::Props::Shared& props,
                                                                      react::RawProps rawProps) const {
    // 1. Prepare raw props parser
    rawProps.parse(rawPropsParser_);
    // 2. Copy props with Nitro's cached copy constructor
    return HybridTelephotoShadowNode::Props(context, /* & */ rawProps, props);
  }

#ifdef ANDROID
  void HybridTelephotoComponentDescriptor::adopt(react::ShadowNode& shadowNode) const {
    // This is called immediately after `ShadowNode` is created, cloned or in progress.
    // On Android, we need to wrap props in our state, which gets routed through Java and later unwrapped in JNI/C++.
    auto& concreteShadowNode = dynamic_cast<HybridTelephotoShadowNode&>(shadowNode);
    const HybridTelephotoProps& props = concreteShadowNode.getConcreteProps();
    HybridTelephotoState state;
    state.setProps(props);
    concreteShadowNode.setStateData(std::move(state));
  }
#endif

} // namespace margelo::nitro::telephoto::views
