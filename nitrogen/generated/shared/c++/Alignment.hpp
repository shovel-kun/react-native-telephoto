///
/// Alignment.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::telephoto {

  /**
   * An enum which can be represented as a JavaScript union (Alignment).
   */
  enum class Alignment {
    TOP_START      SWIFT_NAME(topStart) = 0,
    TOP_CENTER      SWIFT_NAME(topCenter) = 1,
    TOP_END      SWIFT_NAME(topEnd) = 2,
    CENTER_START      SWIFT_NAME(centerStart) = 3,
    CENTER      SWIFT_NAME(center) = 4,
    CENTER_END      SWIFT_NAME(centerEnd) = 5,
    BOTTOM_START      SWIFT_NAME(bottomStart) = 6,
    BOTTOM_CENTER      SWIFT_NAME(bottomCenter) = 7,
    BOTTOM_END      SWIFT_NAME(bottomEnd) = 8,
  } CLOSED_ENUM;

} // namespace margelo::nitro::telephoto

namespace margelo::nitro {

  using namespace margelo::nitro::telephoto;

  // C++ Alignment <> JS Alignment (union)
  template <>
  struct JSIConverter<Alignment> final {
    static inline Alignment fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("top-start"): return Alignment::TOP_START;
        case hashString("top-center"): return Alignment::TOP_CENTER;
        case hashString("top-end"): return Alignment::TOP_END;
        case hashString("center-start"): return Alignment::CENTER_START;
        case hashString("center"): return Alignment::CENTER;
        case hashString("center-end"): return Alignment::CENTER_END;
        case hashString("bottom-start"): return Alignment::BOTTOM_START;
        case hashString("bottom-center"): return Alignment::BOTTOM_CENTER;
        case hashString("bottom-end"): return Alignment::BOTTOM_END;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum Alignment - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, Alignment arg) {
      switch (arg) {
        case Alignment::TOP_START: return JSIConverter<std::string>::toJSI(runtime, "top-start");
        case Alignment::TOP_CENTER: return JSIConverter<std::string>::toJSI(runtime, "top-center");
        case Alignment::TOP_END: return JSIConverter<std::string>::toJSI(runtime, "top-end");
        case Alignment::CENTER_START: return JSIConverter<std::string>::toJSI(runtime, "center-start");
        case Alignment::CENTER: return JSIConverter<std::string>::toJSI(runtime, "center");
        case Alignment::CENTER_END: return JSIConverter<std::string>::toJSI(runtime, "center-end");
        case Alignment::BOTTOM_START: return JSIConverter<std::string>::toJSI(runtime, "bottom-start");
        case Alignment::BOTTOM_CENTER: return JSIConverter<std::string>::toJSI(runtime, "bottom-center");
        case Alignment::BOTTOM_END: return JSIConverter<std::string>::toJSI(runtime, "bottom-end");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert Alignment to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("top-start"):
        case hashString("top-center"):
        case hashString("top-end"):
        case hashString("center-start"):
        case hashString("center"):
        case hashString("center-end"):
        case hashString("bottom-start"):
        case hashString("bottom-center"):
        case hashString("bottom-end"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
