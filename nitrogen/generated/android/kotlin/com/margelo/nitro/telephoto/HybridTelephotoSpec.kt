///
/// HybridTelephotoSpec.kt
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

package com.margelo.nitro.telephoto

import androidx.annotation.Keep
import com.facebook.jni.HybridData
import com.facebook.proguard.annotations.DoNotStrip
import com.margelo.nitro.core.*
import com.margelo.nitro.views.*

/**
 * A Kotlin class representing the Telephoto HybridObject.
 * Implement this abstract class to create Kotlin-based instances of Telephoto.
 */
@DoNotStrip
@Keep
@Suppress(
  "KotlinJniMissingFunction", "unused",
  "RedundantSuppression", "RedundantUnitReturnType", "SimpleRedundantLet",
  "LocalVariableName", "PropertyName", "PrivatePropertyName", "FunctionName"
)
abstract class HybridTelephotoSpec: HybridView() {
  @DoNotStrip
  private var mHybridData: HybridData = initHybrid()

  init {
    super.updateNative(mHybridData)
  }

  override fun updateNative(hybridData: HybridData) {
    mHybridData = hybridData
    super.updateNative(hybridData)
  }

  // Properties
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var source: String
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var contentDescription: String?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var alignment: Alignment?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var contentScale: ContentScale?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var minZoomFactor: Double?
  
  @get:DoNotStrip
  @get:Keep
  @set:DoNotStrip
  @set:Keep
  abstract var maxZoomFactor: Double?
  
  abstract var onPress: ((offset: Offset) -> Unit)?
  
  private var onPress_cxx: Func_void_Offset?
    @Keep
    @DoNotStrip
    get() {
      return onPress?.let { Func_void_Offset_java(it) }
    }
    @Keep
    @DoNotStrip
    set(value) {
      onPress = value?.let { it }
    }
  
  abstract var onLongPress: ((offset: Offset) -> Unit)?
  
  private var onLongPress_cxx: Func_void_Offset?
    @Keep
    @DoNotStrip
    get() {
      return onLongPress?.let { Func_void_Offset_java(it) }
    }
    @Keep
    @DoNotStrip
    set(value) {
      onLongPress = value?.let { it }
    }
  
  abstract var onZoomFractionChanged: ((factor: Double?) -> Unit)?
  
  private var onZoomFractionChanged_cxx: Func_void_std__optional_double_?
    @Keep
    @DoNotStrip
    get() {
      return onZoomFractionChanged?.let { Func_void_std__optional_double__java(it) }
    }
    @Keep
    @DoNotStrip
    set(value) {
      onZoomFractionChanged = value?.let { it }
    }

  // Methods
  @DoNotStrip
  @Keep
  abstract fun zoomTo(factor: Double, centroid: Offset): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun zoomBy(factor: Double, centroid: Offset): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun resetZoom(): Promise<Unit>

  private external fun initHybrid(): HybridData

  companion object {
    private const val TAG = "HybridTelephotoSpec"
  }
}
