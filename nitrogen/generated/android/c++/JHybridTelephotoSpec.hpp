///
/// HybridTelephotoSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <NitroModules/JHybridObject.hpp>
#include <fbjni/fbjni.h>
#include "HybridTelephotoSpec.hpp"




namespace margelo::nitro::telephoto {

  using namespace facebook;

  class JHybridTelephotoSpec: public jni::HybridClass<JHybridTelephotoSpec, JHybridObject>,
                              public virtual HybridTelephotoSpec {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/telephoto/HybridTelephotoSpec;";
    static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
    static void registerNatives();

  protected:
    // C++ constructor (called from Java via `initHybrid()`)
    explicit JHybridTelephotoSpec(jni::alias_ref<jhybridobject> jThis) :
      HybridObject(HybridTelephotoSpec::TAG),
      _javaPart(jni::make_global(jThis)) {}

  public:
    ~JHybridTelephotoSpec() override {
      // Hermes GC can destroy JS objects on a non-JNI Thread.
      jni::ThreadScope::WithClassLoader([&] { _javaPart.reset(); });
    }

  public:
    size_t getExternalMemorySize() noexcept override;

  public:
    inline const jni::global_ref<JHybridTelephotoSpec::javaobject>& getJavaPart() const noexcept {
      return _javaPart;
    }

  public:
    // Properties
    std::string getSource() override;
    void setSource(const std::string& source) override;
    std::optional<std::string> getContentDescription() override;
    void setContentDescription(const std::optional<std::string>& contentDescription) override;
    std::optional<Alignment> getAlignment() override;
    void setAlignment(std::optional<Alignment> alignment) override;
    std::optional<ContentScale> getContentScale() override;
    void setContentScale(std::optional<ContentScale> contentScale) override;
    std::optional<double> getMinZoomFactor() override;
    void setMinZoomFactor(std::optional<double> minZoomFactor) override;
    std::optional<double> getMaxZoomFactor() override;
    void setMaxZoomFactor(std::optional<double> maxZoomFactor) override;
    std::optional<std::function<void(const Offset& /* offset */)>> getOnPress() override;
    void setOnPress(const std::optional<std::function<void(const Offset& /* offset */)>>& onPress) override;
    std::optional<std::function<void(const Offset& /* offset */)>> getOnLongPress() override;
    void setOnLongPress(const std::optional<std::function<void(const Offset& /* offset */)>>& onLongPress) override;
    std::optional<std::function<void(std::optional<double> /* factor */)>> getOnZoomFractionChanged() override;
    void setOnZoomFractionChanged(const std::optional<std::function<void(std::optional<double> /* factor */)>>& onZoomFractionChanged) override;

  public:
    // Methods
    std::shared_ptr<Promise<void>> zoomTo(double factor, const Offset& centroid) override;
    std::shared_ptr<Promise<void>> zoomBy(double factor, const Offset& centroid) override;
    std::shared_ptr<Promise<void>> resetZoom() override;

  private:
    friend HybridBase;
    using HybridBase::HybridBase;
    jni::global_ref<JHybridTelephotoSpec::javaobject> _javaPart;
  };

} // namespace margelo::nitro::telephoto
