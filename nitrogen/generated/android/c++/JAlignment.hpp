///
/// JAlignment.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "Alignment.hpp"

namespace margelo::nitro::telephoto {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "Alignment" and the the Kotlin enum "Alignment".
   */
  struct JAlignment final: public jni::JavaClass<JAlignment> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/telephoto/Alignment;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum Alignment.
     */
    [[maybe_unused]]
    [[nodiscard]]
    Alignment toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("_ordinal");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<Alignment>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JAlignment> fromCpp(Alignment value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldTOP_START = clazz->getStaticField<JAlignment>("TOP_START");
      static const auto fieldTOP_CENTER = clazz->getStaticField<JAlignment>("TOP_CENTER");
      static const auto fieldTOP_END = clazz->getStaticField<JAlignment>("TOP_END");
      static const auto fieldCENTER_START = clazz->getStaticField<JAlignment>("CENTER_START");
      static const auto fieldCENTER = clazz->getStaticField<JAlignment>("CENTER");
      static const auto fieldCENTER_END = clazz->getStaticField<JAlignment>("CENTER_END");
      static const auto fieldBOTTOM_START = clazz->getStaticField<JAlignment>("BOTTOM_START");
      static const auto fieldBOTTOM_CENTER = clazz->getStaticField<JAlignment>("BOTTOM_CENTER");
      static const auto fieldBOTTOM_END = clazz->getStaticField<JAlignment>("BOTTOM_END");
      
      switch (value) {
        case Alignment::TOP_START:
          return clazz->getStaticFieldValue(fieldTOP_START);
        case Alignment::TOP_CENTER:
          return clazz->getStaticFieldValue(fieldTOP_CENTER);
        case Alignment::TOP_END:
          return clazz->getStaticFieldValue(fieldTOP_END);
        case Alignment::CENTER_START:
          return clazz->getStaticFieldValue(fieldCENTER_START);
        case Alignment::CENTER:
          return clazz->getStaticFieldValue(fieldCENTER);
        case Alignment::CENTER_END:
          return clazz->getStaticFieldValue(fieldCENTER_END);
        case Alignment::BOTTOM_START:
          return clazz->getStaticFieldValue(fieldBOTTOM_START);
        case Alignment::BOTTOM_CENTER:
          return clazz->getStaticFieldValue(fieldBOTTOM_CENTER);
        case Alignment::BOTTOM_END:
          return clazz->getStaticFieldValue(fieldBOTTOM_END);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::telephoto
