///
/// JHybridTelephotoSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridTelephotoSpec.hpp"

// Forward declaration of `Alignment` to properly resolve imports.
namespace margelo::nitro::telephoto { enum class Alignment; }
// Forward declaration of `ContentScale` to properly resolve imports.
namespace margelo::nitro::telephoto { enum class ContentScale; }
// Forward declaration of `Offset` to properly resolve imports.
namespace margelo::nitro::telephoto { struct Offset; }

#include <string>
#include <optional>
#include "Alignment.hpp"
#include "JAlignment.hpp"
#include "ContentScale.hpp"
#include "JContentScale.hpp"
#include <functional>
#include "Offset.hpp"
#include "JFunc_void_Offset.hpp"
#include "JOffset.hpp"
#include "JFunc_void_std__optional_double_.hpp"
#include <NitroModules/Promise.hpp>
#include <NitroModules/JPromise.hpp>

namespace margelo::nitro::telephoto {

  jni::local_ref<JHybridTelephotoSpec::jhybriddata> JHybridTelephotoSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridTelephotoSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridTelephotoSpec::initHybrid),
    });
  }

  size_t JHybridTelephotoSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  std::string JHybridTelephotoSpec::getSource() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getSource");
    auto __result = method(_javaPart);
    return __result->toStdString();
  }
  void JHybridTelephotoSpec::setSource(const std::string& source) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JString> /* source */)>("setSource");
    method(_javaPart, jni::make_jstring(source));
  }
  std::optional<std::string> JHybridTelephotoSpec::getContentDescription() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getContentDescription");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toStdString()) : std::nullopt;
  }
  void JHybridTelephotoSpec::setContentDescription(const std::optional<std::string>& contentDescription) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JString> /* contentDescription */)>("setContentDescription");
    method(_javaPart, contentDescription.has_value() ? jni::make_jstring(contentDescription.value()) : nullptr);
  }
  std::optional<Alignment> JHybridTelephotoSpec::getAlignment() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JAlignment>()>("getAlignment");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toCpp()) : std::nullopt;
  }
  void JHybridTelephotoSpec::setAlignment(std::optional<Alignment> alignment) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JAlignment> /* alignment */)>("setAlignment");
    method(_javaPart, alignment.has_value() ? JAlignment::fromCpp(alignment.value()) : nullptr);
  }
  std::optional<ContentScale> JHybridTelephotoSpec::getContentScale() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JContentScale>()>("getContentScale");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toCpp()) : std::nullopt;
  }
  void JHybridTelephotoSpec::setContentScale(std::optional<ContentScale> contentScale) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JContentScale> /* contentScale */)>("setContentScale");
    method(_javaPart, contentScale.has_value() ? JContentScale::fromCpp(contentScale.value()) : nullptr);
  }
  std::optional<double> JHybridTelephotoSpec::getMinZoomFactor() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JDouble>()>("getMinZoomFactor");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->value()) : std::nullopt;
  }
  void JHybridTelephotoSpec::setMinZoomFactor(std::optional<double> minZoomFactor) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JDouble> /* minZoomFactor */)>("setMinZoomFactor");
    method(_javaPart, minZoomFactor.has_value() ? jni::JDouble::valueOf(minZoomFactor.value()) : nullptr);
  }
  std::optional<double> JHybridTelephotoSpec::getMaxZoomFactor() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JDouble>()>("getMaxZoomFactor");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->value()) : std::nullopt;
  }
  void JHybridTelephotoSpec::setMaxZoomFactor(std::optional<double> maxZoomFactor) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JDouble> /* maxZoomFactor */)>("setMaxZoomFactor");
    method(_javaPart, maxZoomFactor.has_value() ? jni::JDouble::valueOf(maxZoomFactor.value()) : nullptr);
  }
  std::optional<std::function<void(const Offset& /* offset */)>> JHybridTelephotoSpec::getOnPress() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JFunc_void_Offset::javaobject>()>("getOnPress_cxx");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional([&]() -> std::function<void(const Offset& /* offset */)> {
      if (__result->isInstanceOf(JFunc_void_Offset_cxx::javaClassStatic())) [[likely]] {
        auto downcast = jni::static_ref_cast<JFunc_void_Offset_cxx::javaobject>(__result);
        return downcast->cthis()->getFunction();
      } else {
        auto __resultRef = jni::make_global(__result);
        return [__resultRef](Offset offset) -> void {
          return __resultRef->invoke(offset);
        };
      }
    }()) : std::nullopt;
  }
  void JHybridTelephotoSpec::setOnPress(const std::optional<std::function<void(const Offset& /* offset */)>>& onPress) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JFunc_void_Offset::javaobject> /* onPress */)>("setOnPress_cxx");
    method(_javaPart, onPress.has_value() ? JFunc_void_Offset_cxx::fromCpp(onPress.value()) : nullptr);
  }
  std::optional<std::function<void(const Offset& /* offset */)>> JHybridTelephotoSpec::getOnLongPress() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JFunc_void_Offset::javaobject>()>("getOnLongPress_cxx");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional([&]() -> std::function<void(const Offset& /* offset */)> {
      if (__result->isInstanceOf(JFunc_void_Offset_cxx::javaClassStatic())) [[likely]] {
        auto downcast = jni::static_ref_cast<JFunc_void_Offset_cxx::javaobject>(__result);
        return downcast->cthis()->getFunction();
      } else {
        auto __resultRef = jni::make_global(__result);
        return [__resultRef](Offset offset) -> void {
          return __resultRef->invoke(offset);
        };
      }
    }()) : std::nullopt;
  }
  void JHybridTelephotoSpec::setOnLongPress(const std::optional<std::function<void(const Offset& /* offset */)>>& onLongPress) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JFunc_void_Offset::javaobject> /* onLongPress */)>("setOnLongPress_cxx");
    method(_javaPart, onLongPress.has_value() ? JFunc_void_Offset_cxx::fromCpp(onLongPress.value()) : nullptr);
  }
  std::optional<std::function<void(std::optional<double> /* factor */)>> JHybridTelephotoSpec::getOnZoomFractionChanged() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JFunc_void_std__optional_double_::javaobject>()>("getOnZoomFractionChanged_cxx");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional([&]() -> std::function<void(std::optional<double> /* factor */)> {
      if (__result->isInstanceOf(JFunc_void_std__optional_double__cxx::javaClassStatic())) [[likely]] {
        auto downcast = jni::static_ref_cast<JFunc_void_std__optional_double__cxx::javaobject>(__result);
        return downcast->cthis()->getFunction();
      } else {
        auto __resultRef = jni::make_global(__result);
        return [__resultRef](std::optional<double> factor) -> void {
          return __resultRef->invoke(factor);
        };
      }
    }()) : std::nullopt;
  }
  void JHybridTelephotoSpec::setOnZoomFractionChanged(const std::optional<std::function<void(std::optional<double> /* factor */)>>& onZoomFractionChanged) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JFunc_void_std__optional_double_::javaobject> /* onZoomFractionChanged */)>("setOnZoomFractionChanged_cxx");
    method(_javaPart, onZoomFractionChanged.has_value() ? JFunc_void_std__optional_double__cxx::fromCpp(onZoomFractionChanged.value()) : nullptr);
  }

  // Methods
  std::shared_ptr<Promise<void>> JHybridTelephotoSpec::zoomTo(double factor, const Offset& centroid) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(double /* factor */, jni::alias_ref<JOffset> /* centroid */)>("zoomTo");
    auto __result = method(_javaPart, factor, JOffset::fromCpp(centroid));
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridTelephotoSpec::zoomBy(double factor, const Offset& centroid) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(double /* factor */, jni::alias_ref<JOffset> /* centroid */)>("zoomBy");
    auto __result = method(_javaPart, factor, JOffset::fromCpp(centroid));
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridTelephotoSpec::resetZoom() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("resetZoom");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::telephoto
