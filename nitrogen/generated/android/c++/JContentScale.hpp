///
/// JContentScale.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "ContentScale.hpp"

namespace margelo::nitro::telephoto {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "ContentScale" and the the Kotlin enum "ContentScale".
   */
  struct JContentScale final: public jni::JavaClass<JContentScale> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/telephoto/ContentScale;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum ContentScale.
     */
    [[maybe_unused]]
    [[nodiscard]]
    ContentScale toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("_ordinal");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<ContentScale>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JContentScale> fromCpp(ContentScale value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldCROP = clazz->getStaticField<JContentScale>("CROP");
      static const auto fieldFIT = clazz->getStaticField<JContentScale>("FIT");
      static const auto fieldFILL_WIDTH = clazz->getStaticField<JContentScale>("FILL_WIDTH");
      static const auto fieldFILL_HEIGHT = clazz->getStaticField<JContentScale>("FILL_HEIGHT");
      static const auto fieldINSIDE = clazz->getStaticField<JContentScale>("INSIDE");
      static const auto fieldNONE = clazz->getStaticField<JContentScale>("NONE");
      static const auto fieldFILL_BOUNDS = clazz->getStaticField<JContentScale>("FILL_BOUNDS");
      
      switch (value) {
        case ContentScale::CROP:
          return clazz->getStaticFieldValue(fieldCROP);
        case ContentScale::FIT:
          return clazz->getStaticFieldValue(fieldFIT);
        case ContentScale::FILL_WIDTH:
          return clazz->getStaticFieldValue(fieldFILL_WIDTH);
        case ContentScale::FILL_HEIGHT:
          return clazz->getStaticFieldValue(fieldFILL_HEIGHT);
        case ContentScale::INSIDE:
          return clazz->getStaticFieldValue(fieldINSIDE);
        case ContentScale::NONE:
          return clazz->getStaticFieldValue(fieldNONE);
        case ContentScale::FILL_BOUNDS:
          return clazz->getStaticFieldValue(fieldFILL_BOUNDS);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::telephoto
