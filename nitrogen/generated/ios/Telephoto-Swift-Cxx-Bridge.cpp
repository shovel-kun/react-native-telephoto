///
/// Telephoto-Swift-Cxx-Bridge.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "Telephoto-Swift-Cxx-Bridge.hpp"

// Include C++ implementation defined types
#include "HybridTelephotoSpecSwift.hpp"
#include "Telephoto-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::telephoto::bridge::swift {

  // pragma MARK: std::function<void(const Offset& /* offset */)>
  Func_void_Offset create_Func_void_Offset(void* _Nonnull swiftClosureWrapper) {
    auto swiftClosure = Telephoto::Func_void_Offset::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const Offset& offset) mutable -> void {
      swiftClosure.call(offset);
    };
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::telephoto::HybridTelephotoSpec>
  std::shared_ptr<margelo::nitro::telephoto::HybridTelephotoSpec> create_std__shared_ptr_margelo__nitro__telephoto__HybridTelephotoSpec_(void* _Nonnull swiftUnsafePointer) {
    Telephoto::HybridTelephotoSpec_cxx swiftPart = Telephoto::HybridTelephotoSpec_cxx::fromUnsafe(swiftUnsafePointer);
    return std::make_shared<margelo::nitro::telephoto::HybridTelephotoSpecSwift>(swiftPart);
  }
  void* _Nonnull get_std__shared_ptr_margelo__nitro__telephoto__HybridTelephotoSpec_(std__shared_ptr_margelo__nitro__telephoto__HybridTelephotoSpec_ cppType) {
    std::shared_ptr<margelo::nitro::telephoto::HybridTelephotoSpecSwift> swiftWrapper = std::dynamic_pointer_cast<margelo::nitro::telephoto::HybridTelephotoSpecSwift>(cppType);
  #ifdef NITRO_DEBUG
    if (swiftWrapper == nullptr) [[unlikely]] {
      throw std::runtime_error("Class \"HybridTelephotoSpec\" is not implemented in Swift!");
    }
  #endif
    Telephoto::HybridTelephotoSpec_cxx& swiftPart = swiftWrapper->getSwiftPart();
    return swiftPart.toUnsafe();
  }

} // namespace margelo::nitro::telephoto::bridge::swift
