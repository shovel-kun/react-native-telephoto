///
/// HybridTelephotoSpec_cxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges HybridTelephotoSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
public class HybridTelephotoSpec_cxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::telephoto::bridge::swift`)
   * from `Telephoto-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.telephoto.bridge.swift

  /**
   * Holds an instance of the `HybridTelephotoSpec` Swift protocol.
   */
  private var __implementation: any HybridTelephotoSpec

  /**
   * Holds a weak pointer to the C++ class that wraps the Swift class.
   */
  private var __cxxPart: bridge.std__weak_ptr_margelo__nitro__telephoto__HybridTelephotoSpec_

  /**
   * Create a new `HybridTelephotoSpec_cxx` that wraps the given `HybridTelephotoSpec`.
   * All properties and methods bridge to C++ types.
   */
  public init(_ implementation: any HybridTelephotoSpec) {
    self.__implementation = implementation
    self.__cxxPart = .init()
    /* no base class */
  }

  /**
   * Get the actual `HybridTelephotoSpec` instance this class wraps.
   */
  @inline(__always)
  public func getHybridTelephotoSpec() -> any HybridTelephotoSpec {
    return __implementation
  }

  /**
   * Casts this instance to a retained unsafe raw pointer.
   * This acquires one additional strong reference on the object!
   */
  public func toUnsafe() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(self).toOpaque()
  }

  /**
   * Casts an unsafe pointer to a `HybridTelephotoSpec_cxx`.
   * The pointer has to be a retained opaque `Unmanaged<HybridTelephotoSpec_cxx>`.
   * This removes one strong reference from the object!
   */
  public class func fromUnsafe(_ pointer: UnsafeMutableRawPointer) -> HybridTelephotoSpec_cxx {
    return Unmanaged<HybridTelephotoSpec_cxx>.fromOpaque(pointer).takeRetainedValue()
  }

  /**
   * Gets (or creates) the C++ part of this Hybrid Object.
   * The C++ part is a `std::shared_ptr<margelo::nitro::telephoto::HybridTelephotoSpec>`.
   */
  public func getCxxPart() -> bridge.std__shared_ptr_margelo__nitro__telephoto__HybridTelephotoSpec_ {
    let cachedCxxPart = self.__cxxPart.lock()
    if cachedCxxPart.__convertToBool() {
      return cachedCxxPart
    } else {
      let newCxxPart = bridge.create_std__shared_ptr_margelo__nitro__telephoto__HybridTelephotoSpec_(self.toUnsafe())
      __cxxPart = bridge.weakify_std__shared_ptr_margelo__nitro__telephoto__HybridTelephotoSpec_(newCxxPart)
      return newCxxPart
    }
  }

  

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  @inline(__always)
  public var memorySize: Int {
    return MemoryHelper.getSizeOf(self.__implementation) + self.__implementation.memorySize
  }

  // Properties
  public final var source: std.string {
    @inline(__always)
    get {
      return std.string(self.__implementation.source)
    }
    @inline(__always)
    set {
      self.__implementation.source = String(newValue)
    }
  }
  
  public final var contentDescription: bridge.std__optional_std__string_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = self.__implementation.contentDescription {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.contentDescription = { () -> String? in
        if let __unwrapped = newValue.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var alignment: bridge.std__optional_Alignment_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_Alignment_ in
        if let __unwrappedValue = self.__implementation.alignment {
          return bridge.create_std__optional_Alignment_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.alignment = newValue.value
    }
  }
  
  public final var contentScale: bridge.std__optional_ContentScale_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_ContentScale_ in
        if let __unwrappedValue = self.__implementation.contentScale {
          return bridge.create_std__optional_ContentScale_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.contentScale = newValue.value
    }
  }
  
  public final var minZoomFactor: bridge.std__optional_double_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = self.__implementation.minZoomFactor {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.minZoomFactor = newValue.value
    }
  }
  
  public final var maxZoomFactor: bridge.std__optional_double_ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = self.__implementation.maxZoomFactor {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.maxZoomFactor = newValue.value
    }
  }
  
  public final var onPress: bridge.std__optional_std__function_void_const_Offset_____offset______ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__function_void_const_Offset_____offset______ in
        if let __unwrappedValue = self.__implementation.onPress {
          return bridge.create_std__optional_std__function_void_const_Offset_____offset______({ () -> bridge.Func_void_Offset in
            let __closureWrapper = Func_void_Offset(__unwrappedValue)
            return bridge.create_Func_void_Offset(__closureWrapper.toUnsafe())
          }())
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.onPress = { () -> ((_ offset: Offset) -> Void)? in
        if let __unwrapped = newValue.value {
          return { () -> (Offset) -> Void in
            let __wrappedFunction = bridge.wrap_Func_void_Offset(__unwrapped)
            return { (__offset: Offset) -> Void in
              __wrappedFunction.call(__offset)
            }
          }()
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var onLongPress: bridge.std__optional_std__function_void_const_Offset_____offset______ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__function_void_const_Offset_____offset______ in
        if let __unwrappedValue = self.__implementation.onLongPress {
          return bridge.create_std__optional_std__function_void_const_Offset_____offset______({ () -> bridge.Func_void_Offset in
            let __closureWrapper = Func_void_Offset(__unwrappedValue)
            return bridge.create_Func_void_Offset(__closureWrapper.toUnsafe())
          }())
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.onLongPress = { () -> ((_ offset: Offset) -> Void)? in
        if let __unwrapped = newValue.value {
          return { () -> (Offset) -> Void in
            let __wrappedFunction = bridge.wrap_Func_void_Offset(__unwrapped)
            return { (__offset: Offset) -> Void in
              __wrappedFunction.call(__offset)
            }
          }()
        } else {
          return nil
        }
      }()
    }
  }
  
  public final var onZoomFractionChanged: bridge.std__optional_std__function_void_std__optional_double_____factor______ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__function_void_std__optional_double_____factor______ in
        if let __unwrappedValue = self.__implementation.onZoomFractionChanged {
          return bridge.create_std__optional_std__function_void_std__optional_double_____factor______({ () -> bridge.Func_void_std__optional_double_ in
            let __closureWrapper = Func_void_std__optional_double_(__unwrappedValue)
            return bridge.create_Func_void_std__optional_double_(__closureWrapper.toUnsafe())
          }())
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.onZoomFractionChanged = { () -> ((_ factor: Double?) -> Void)? in
        if let __unwrapped = newValue.value {
          return { () -> (Double?) -> Void in
            let __wrappedFunction = bridge.wrap_Func_void_std__optional_double_(__unwrapped)
            return { (__factor: Double?) -> Void in
              __wrappedFunction.call({ () -> bridge.std__optional_double_ in
                if let __unwrappedValue = __factor {
                  return bridge.create_std__optional_double_(__unwrappedValue)
                } else {
                  return .init()
                }
              }())
            }
          }()
        } else {
          return nil
        }
      }()
    }
  }

  // Methods
  @inline(__always)
  public final func zoomTo(factor: Double, centroid: Offset) -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __result = try self.__implementation.zoomTo(factor: factor, centroid: centroid)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func zoomBy(factor: Double, centroid: Offset) -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __result = try self.__implementation.zoomBy(factor: factor, centroid: centroid)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func resetZoom() -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __result = try self.__implementation.resetZoom()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  public final func getView() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(__implementation.view).toOpaque()
  }
  
  public final func beforeUpdate() {
    __implementation.beforeUpdate()
  }
  
  public final func afterUpdate() {
    __implementation.afterUpdate()
  }
}
