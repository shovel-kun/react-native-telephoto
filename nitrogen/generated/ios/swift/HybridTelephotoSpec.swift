///
/// HybridTelephotoSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridTelephotoSpec``
public protocol HybridTelephotoSpec_protocol: HybridObject, HybridView {
  // Properties
  var source: String { get set }
  var contentDescription: String? { get set }
  var alignment: Alignment? { get set }
  var contentScale: ContentScale? { get set }
  var minZoomFactor: Double? { get set }
  var maxZoomFactor: Double? { get set }
  var onPress: ((_ offset: Offset) -> Void)? { get set }
  var onLongPress: ((_ offset: Offset) -> Void)? { get set }
  var onZoomFractionChanged: ((_ factor: Double?) -> Void)? { get set }

  // Methods
  func zoomTo(factor: Double, centroid: Offset) throws -> Promise<Void>
  func zoomBy(factor: Double, centroid: Offset) throws -> Promise<Void>
  func resetZoom() throws -> Promise<Void>
}

/// See ``HybridTelephotoSpec``
public class HybridTelephotoSpec_base {
  private weak var cxxWrapper: HybridTelephotoSpec_cxx? = nil
  public func getCxxWrapper() -> HybridTelephotoSpec_cxx {
  #if DEBUG
    guard self is HybridTelephotoSpec else {
      fatalError("`self` is not a `HybridTelephotoSpec`! Did you accidentally inherit from `HybridTelephotoSpec_base` instead of `HybridTelephotoSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridTelephotoSpec_cxx(self as! HybridTelephotoSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the Telephoto HybridObject.
 * Implement this protocol to create Swift-based instances of Telephoto.
 * ```swift
 * class HybridTelephoto : HybridTelephotoSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridTelephotoSpec = HybridTelephotoSpec_protocol & HybridTelephotoSpec_base
