///
/// HybridTelephotoSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridTelephotoSpec.hpp"

// Forward declaration of `HybridTelephotoSpec_cxx` to properly resolve imports.
namespace Telephoto { class HybridTelephotoSpec_cxx; }

// Forward declaration of `Alignment` to properly resolve imports.
namespace margelo::nitro::telephoto { enum class Alignment; }
// Forward declaration of `ContentScale` to properly resolve imports.
namespace margelo::nitro::telephoto { enum class ContentScale; }
// Forward declaration of `Offset` to properly resolve imports.
namespace margelo::nitro::telephoto { struct Offset; }

#include <string>
#include <optional>
#include "Alignment.hpp"
#include "ContentScale.hpp"
#include <functional>
#include "Offset.hpp"
#include <NitroModules/Promise.hpp>

#include "Telephoto-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::telephoto {

  /**
   * The C++ part of HybridTelephotoSpec_cxx.swift.
   *
   * HybridTelephotoSpecSwift (C++) accesses HybridTelephotoSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridTelephotoSpec_cxx can directly inherit from the C++ class HybridTelephotoSpec
   * to simplify the whole structure and memory management.
   */
  class HybridTelephotoSpecSwift: public virtual HybridTelephotoSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridTelephotoSpecSwift(const Telephoto::HybridTelephotoSpec_cxx& swiftPart):
      HybridObject(HybridTelephotoSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline Telephoto::HybridTelephotoSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    inline std::string getSource() noexcept override {
      auto __result = _swiftPart.getSource();
      return __result;
    }
    inline void setSource(const std::string& source) noexcept override {
      _swiftPart.setSource(source);
    }
    inline std::optional<std::string> getContentDescription() noexcept override {
      auto __result = _swiftPart.getContentDescription();
      return __result;
    }
    inline void setContentDescription(const std::optional<std::string>& contentDescription) noexcept override {
      _swiftPart.setContentDescription(contentDescription);
    }
    inline std::optional<Alignment> getAlignment() noexcept override {
      auto __result = _swiftPart.getAlignment();
      return __result;
    }
    inline void setAlignment(std::optional<Alignment> alignment) noexcept override {
      _swiftPart.setAlignment(alignment);
    }
    inline std::optional<ContentScale> getContentScale() noexcept override {
      auto __result = _swiftPart.getContentScale();
      return __result;
    }
    inline void setContentScale(std::optional<ContentScale> contentScale) noexcept override {
      _swiftPart.setContentScale(contentScale);
    }
    inline std::optional<double> getMinZoomFactor() noexcept override {
      auto __result = _swiftPart.getMinZoomFactor();
      return __result;
    }
    inline void setMinZoomFactor(std::optional<double> minZoomFactor) noexcept override {
      _swiftPart.setMinZoomFactor(minZoomFactor);
    }
    inline std::optional<double> getMaxZoomFactor() noexcept override {
      auto __result = _swiftPart.getMaxZoomFactor();
      return __result;
    }
    inline void setMaxZoomFactor(std::optional<double> maxZoomFactor) noexcept override {
      _swiftPart.setMaxZoomFactor(maxZoomFactor);
    }
    inline std::optional<std::function<void(const Offset& /* offset */)>> getOnPress() noexcept override {
      auto __result = _swiftPart.getOnPress();
      return __result;
    }
    inline void setOnPress(const std::optional<std::function<void(const Offset& /* offset */)>>& onPress) noexcept override {
      _swiftPart.setOnPress(onPress);
    }
    inline std::optional<std::function<void(const Offset& /* offset */)>> getOnLongPress() noexcept override {
      auto __result = _swiftPart.getOnLongPress();
      return __result;
    }
    inline void setOnLongPress(const std::optional<std::function<void(const Offset& /* offset */)>>& onLongPress) noexcept override {
      _swiftPart.setOnLongPress(onLongPress);
    }
    inline std::optional<std::function<void(std::optional<double> /* factor */)>> getOnZoomFractionChanged() noexcept override {
      auto __result = _swiftPart.getOnZoomFractionChanged();
      return __result;
    }
    inline void setOnZoomFractionChanged(const std::optional<std::function<void(std::optional<double> /* factor */)>>& onZoomFractionChanged) noexcept override {
      _swiftPart.setOnZoomFractionChanged(onZoomFractionChanged);
    }

  public:
    // Methods
    inline std::shared_ptr<Promise<void>> zoomTo(double factor, const Offset& centroid) override {
      auto __result = _swiftPart.zoomTo(std::forward<decltype(factor)>(factor), centroid);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> zoomBy(double factor, const Offset& centroid) override {
      auto __result = _swiftPart.zoomBy(std::forward<decltype(factor)>(factor), centroid);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> resetZoom() override {
      auto __result = _swiftPart.resetZoom();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    Telephoto::HybridTelephotoSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::telephoto
