///
/// HybridTelephotoComponent.mm
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#import "HybridTelephotoComponent.hpp"
#import <memory>
#import <react/renderer/componentregistry/ComponentDescriptorProvider.h>
#import <React/RCTViewComponentView.h>
#import <React/RCTComponentViewFactory.h>
#import <React/UIView+ComponentViewProtocol.h>
#import <NitroModules/NitroDefines.hpp>
#import <UIKit/UIKit.h>

#import "HybridTelephotoSpecSwift.hpp"
#import "Telephoto-Swift-Cxx-Umbrella.hpp"

using namespace facebook;
using namespace margelo::nitro::telephoto;
using namespace margelo::nitro::telephoto::views;

/**
 * Represents the React Native View holder for the Nitro "Telephoto" HybridView.
 */
@interface HybridTelephotoComponent: RCTViewComponentView
@end

@implementation HybridTelephotoComponent {
  std::shared_ptr<HybridTelephotoSpecSwift> _hybridView;
}

+ (void) load {
  [super load];
  [RCTComponentViewFactory.currentComponentViewFactory registerComponentViewClass:[HybridTelephotoComponent class]];
}

+ (react::ComponentDescriptorProvider) componentDescriptorProvider {
  return react::concreteComponentDescriptorProvider<HybridTelephotoComponentDescriptor>();
}

- (instancetype) init {
  if (self = [super init]) {
    std::shared_ptr<HybridTelephotoSpec> hybridView = Telephoto::TelephotoAutolinking::createTelephoto();
    _hybridView = std::dynamic_pointer_cast<HybridTelephotoSpecSwift>(hybridView);
    [self updateView];
  }
  return self;
}

- (void) updateView {
  // 1. Get Swift part
  Telephoto::HybridTelephotoSpec_cxx& swiftPart = _hybridView->getSwiftPart();

  // 2. Get UIView*
  void* viewUnsafe = swiftPart.getView();
  UIView* view = (__bridge_transfer UIView*) viewUnsafe;

  // 3. Update RCTViewComponentView's [contentView]
  [self setContentView:view];
}

- (void) updateProps:(const react::Props::Shared&)props
            oldProps:(const react::Props::Shared&)oldProps {
  // 1. Downcast props
  const auto& newViewPropsConst = *std::static_pointer_cast<HybridTelephotoProps const>(props);
  auto& newViewProps = const_cast<HybridTelephotoProps&>(newViewPropsConst);
  Telephoto::HybridTelephotoSpec_cxx& swiftPart = _hybridView->getSwiftPart();

  // 2. Update each prop individually
  swiftPart.beforeUpdate();

  // source: string
  if (newViewProps.source.isDirty) {
    swiftPart.setSource(newViewProps.source.value);
    newViewProps.source.isDirty = false;
  }
  // contentDescription: optional
  if (newViewProps.contentDescription.isDirty) {
    swiftPart.setContentDescription(newViewProps.contentDescription.value);
    newViewProps.contentDescription.isDirty = false;
  }
  // alignment: optional
  if (newViewProps.alignment.isDirty) {
    swiftPart.setAlignment(newViewProps.alignment.value);
    newViewProps.alignment.isDirty = false;
  }
  // contentScale: optional
  if (newViewProps.contentScale.isDirty) {
    swiftPart.setContentScale(newViewProps.contentScale.value);
    newViewProps.contentScale.isDirty = false;
  }
  // minZoomFactor: optional
  if (newViewProps.minZoomFactor.isDirty) {
    swiftPart.setMinZoomFactor(newViewProps.minZoomFactor.value);
    newViewProps.minZoomFactor.isDirty = false;
  }
  // maxZoomFactor: optional
  if (newViewProps.maxZoomFactor.isDirty) {
    swiftPart.setMaxZoomFactor(newViewProps.maxZoomFactor.value);
    newViewProps.maxZoomFactor.isDirty = false;
  }
  // onPress: optional
  if (newViewProps.onPress.isDirty) {
    swiftPart.setOnPress(newViewProps.onPress.value);
    newViewProps.onPress.isDirty = false;
  }
  // onLongPress: optional
  if (newViewProps.onLongPress.isDirty) {
    swiftPart.setOnLongPress(newViewProps.onLongPress.value);
    newViewProps.onLongPress.isDirty = false;
  }

  swiftPart.afterUpdate();

  // 3. Update hybridRef if it changed
  if (newViewProps.hybridRef.isDirty) {
    // hybridRef changed - call it with new this
    const auto& maybeFunc = newViewProps.hybridRef.value;
    if (maybeFunc.has_value()) {
      maybeFunc.value()(_hybridView);
    }
    newViewProps.hybridRef.isDirty = false;
  }

  // 4. Continue in base class
  [super updateProps:props oldProps:oldProps];
}

@end
